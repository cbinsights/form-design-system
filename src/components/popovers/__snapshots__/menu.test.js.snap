// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popover component matches snapshot (JSX items) 1`] = `
<Menu
  trigger={
    <a
      href="#"
    >
      trigger
    </a>
  }
>
  <Menu>
    <DescendantProvider
      context={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {
            "descendants": Array [],
            "registerDescendant": [Function],
            "unregisterDescendant": [Function],
          },
          "_currentValue2": Object {
            "descendants": Array [],
            "registerDescendant": [Function],
            "unregisterDescendant": [Function],
          },
          "_threadCount": 0,
          "displayName": "MenuDescendantContext",
        }
      }
      items={Array []}
      set={[Function]}
    >
      <MenuButton
        className="resetButton border--focus rounded--all"
      >
        <button
          aria-expanded={false}
          aria-haspopup="menu"
          className="resetButton border--focus rounded--all"
          data-reach-menu-button=""
          id="menu-button--4"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          type="button"
        >
          <a
            href="#"
            tabIndex="-1"
          >
            trigger
          </a>
        </button>
      </MenuButton>
      <MenuPopover
        className="elevation--2 rounded--all bgColor--white"
      />
    </DescendantProvider>
  </Menu>
</Menu>
`;

exports[`Popover component matches snapshot (disabled) 1`] = `
<Menu
  isDisabled={true}
  trigger={
    <a
      href="#"
    >
      trigger
    </a>
  }
>
  <a
    href="#"
  >
    trigger
  </a>
</Menu>
`;

exports[`Popover component matches snapshot (in modal) 1`] = `
<Menu
  isInModal={true}
  trigger={
    <a
      href="#"
    >
      trigger
    </a>
  }
>
  <Menu>
    <DescendantProvider
      context={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {
            "descendants": Array [],
            "registerDescendant": [Function],
            "unregisterDescendant": [Function],
          },
          "_currentValue2": Object {
            "descendants": Array [],
            "registerDescendant": [Function],
            "unregisterDescendant": [Function],
          },
          "_threadCount": 0,
          "displayName": "MenuDescendantContext",
        }
      }
      items={Array []}
      set={[Function]}
    >
      <MenuButton
        className="resetButton border--focus rounded--all"
      >
        <button
          aria-expanded={false}
          aria-haspopup="menu"
          className="resetButton border--focus rounded--all"
          data-reach-menu-button=""
          id="menu-button--6"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          type="button"
        >
          <a
            href="#"
            tabIndex="-1"
          >
            trigger
          </a>
        </button>
      </MenuButton>
      <MenuPopover
        className="fdsMenu--inModal elevation--2 rounded--all bgColor--white"
      />
    </DescendantProvider>
  </Menu>
</Menu>
`;

exports[`Popover component matches snapshot (string items) 1`] = `
<Menu
  trigger={
    <a
      href="#"
    >
      trigger
    </a>
  }
>
  <Menu>
    <DescendantProvider
      context={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_currentRenderer": Object {},
          "_currentRenderer2": null,
          "_currentValue": Object {
            "descendants": Array [],
            "registerDescendant": [Function],
            "unregisterDescendant": [Function],
          },
          "_currentValue2": Object {
            "descendants": Array [],
            "registerDescendant": [Function],
            "unregisterDescendant": [Function],
          },
          "_threadCount": 0,
          "displayName": "MenuDescendantContext",
        }
      }
      items={Array []}
      set={[Function]}
    >
      <MenuButton
        className="resetButton border--focus rounded--all"
      >
        <button
          aria-expanded={false}
          aria-haspopup="menu"
          className="resetButton border--focus rounded--all"
          data-reach-menu-button=""
          id="menu-button--1"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          type="button"
        >
          <a
            href="#"
            tabIndex="-1"
          >
            trigger
          </a>
        </button>
      </MenuButton>
      <MenuPopover
        className="elevation--2 rounded--all bgColor--white"
      />
    </DescendantProvider>
  </Menu>
</Menu>
`;
